// This package implements arbitrary sized public key encryption using rsa. It supports PEM/PKIX encoded keys as, e.g.
// generated by openssl (see documentation). The main functions are GenerateKey, Encrypt and Decrypt.
//
// Internally, a 32 byte password is generated and the input stream's content is encrypted using AES. The password is
// encrypted using the public key. The resulting encrypted password and the symmetrically encrypted data are then
// persisted in the output stream.
//
// Note that we currently do not have sophisticated error handling in place, i.e. we usually simply panic() if a
// function returns a non-nil error value.
package main

// TODO ML Split this up using data structures and corresponding functions?

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"encoding/gob"
	"encoding/pem"
	"io"
)

const passwordLength = 32

// Message in -> encrypted data out
type encryptedData struct {
	Data              []byte // Protected by AES.
	EncryptedPassword []byte // Protected by private key.
	NonceSize         int    // Necessary for AES randomness.
}

// GenerateKey creates a new rsa public key pair with the given bit size.
func GenerateKey(bitSize int) (rsa.PublicKey, rsa.PrivateKey) {
	rng := rand.Reader
	key, _ := rsa.GenerateKey(rng, bitSize)
	pub := key.PublicKey
	return pub, *key
}

// Encrypt a byte slice using the given public key (see package description for actual process) and returns the
// encrypted datawhich can be decrypted using Decrypt().
func Encrypt(data []byte, key *rsa.PublicKey) []byte {
	password, nonceSize, data := encryptSymmetric(data)
	encryptedPassword := encryptAsymmetric(password, key)

	ed := encryptedData{data, encryptedPassword, nonceSize}
	var buffer bytes.Buffer
	enc := gob.NewEncoder(&buffer)
	err := enc.Encode(ed)
	if err != nil {
		panic(err)
	}
	return buffer.Bytes()
}

// Decrypt a byte array using the given private key. Returns the decrypted byte stream.
func Decrypt(data []byte, key *rsa.PrivateKey) []byte {
	dec := gob.NewDecoder(bytes.NewReader(data))
	var ed encryptedData
	err := dec.Decode(&ed)
	if err != nil {
		panic(err)
	}

	password := decryptAsymmetric(ed.EncryptedPassword, key)
	decryptedPlaintext := decryptSymmetric(ed.Data, ed.NonceSize, password)
	return decryptedPlaintext
}

// newRandomPassword returns a new password with the given password length.
func newRandomPassword(passwordLength int) []byte {
	password := make([]byte, passwordLength)
	_, err := rand.Reader.Read(password)
	if err != nil {
		panic(err)
	}
	return password
}

// publicKeyPEM return the PEM block for a public key.
func publicKeyPEM(key *rsa.PublicKey) string {
	bs, err := x509.MarshalPKIXPublicKey(key)
	if err != nil {
		panic(err)
	}
	publicBlock := &pem.Block{
		Type:  "PUBLIC KEY",
		Bytes: bs,
	}
	var buffer bytes.Buffer
	pem.Encode(&buffer, publicBlock)
	return buffer.String()
}

// readPublicKey is the mirror function to publicKeyPEM and parses a public key.
func readPublicKey(data []byte) *rsa.PublicKey {
	block, _ := pem.Decode(data)
	key, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		panic(err)
	}
	rsaKey, ok := key.(*rsa.PublicKey)
	if !ok {
		panic(err)
	}

	return rsaKey
}

// privateKeyPEM returns the PEM block for a given private key.
func privateKeyPEM(key *rsa.PrivateKey) string {
	publicBlock := &pem.Block{
		Type:  "RSA PRIVATE KEY",
		Bytes: x509.MarshalPKCS1PrivateKey(key),
	}
	var buffer bytes.Buffer
	pem.Encode(&buffer, publicBlock)
	return buffer.String()
}

// readPrivateKey is the mirror function to privateKeyPEM and parses a private key.
func readPrivateKey(data []byte) *rsa.PrivateKey {
	block, _ := pem.Decode(data)

	key, err := x509.ParsePKCS1PrivateKey(block.Bytes)
	if err != nil {
		panic(err)
	}

	return key
}

// encryptSymmetric encryptes the message using a randomly generated password.
func encryptSymmetric(message []byte) (password []byte, nonceSize int, data []byte) {
	password = newRandomPassword(passwordLength)

	gcm := createGCMEncryptionWithAES(password)

	// Create random nonce and prepend it to the message.
	nonceSize = gcm.NonceSize()
	nonce := make([]byte, nonceSize)
	io.ReadFull(rand.Reader, nonce)

	// encryptSymmetric
	data = gcm.Seal(nonce, nonce, message, nil)
	return
}

// createGCMEncryptionWithAES creates a GCM cipher which can be used to encrypt a stream of blocks using AES.
func createGCMEncryptionWithAES(password []byte) cipher.AEAD {
	// Create AES instance using random password.
	algorithm, err := aes.NewCipher(password)
	if err != nil {
		panic(err)
	}
	// Create corresponding block encryption.
	gcm, err := cipher.NewGCM(algorithm)
	if err != nil {
		panic(err)
	}
	return gcm
}

// encryptAsymmetric encrypts a message using a public key.
func encryptAsymmetric(message []byte, key *rsa.PublicKey) []byte {
	ciphertext, err := rsa.EncryptOAEP(sha256.New(), rand.Reader, key, message, nil)
	if err != nil {
		panic(err)
	}
	return ciphertext
}

// decryptSymmetric decrypts a message.
func decryptSymmetric(data []byte, nonceSize int, password []byte) []byte {
	nonce, message := data[:nonceSize], data[nonceSize:]
	gcm := createGCMEncryptionWithAES(password)
	plain, err := gcm.Open(nil, nonce, message, nil)
	if err != nil {
		panic(err)
	}
	return plain
}

// decryptAsymmetric decrypts a message using a private key.
func decryptAsymmetric(message []byte, key *rsa.PrivateKey) []byte {
	plaintext, err := rsa.DecryptOAEP(sha256.New(), nil, key, message, nil)
	if err != nil {
		panic(err)
	}
	return plaintext
}
